TITLE ЛР_6 
;------------------------------------------------------------------------------
;ЛР  №6
;------------------------------------------------------------------------------
; Архітектура комп'ютера
; Завдання:              Система оброблення переривань
; ВУЗ:                  КНУУ "КПІ"
; Факультет:    ФІОТ
; Курс:                1
; Група:       ІТ-03
;------------------------------------------------------------------------------
; Автор:        Куксюк Іванченко Очкас
; Дата:         17/04/21
;---------------------------------
IDEAL			; Директива - тип Асемблера tasm 
MODEL small		; Директива - тип моделі пам’яті 
STACK 2048		; Директива - розмір стеку 

DATASEG

message db "IT-03 Team-4 Kuksiuk Ivanchenko Ochkas $"

old_int_seg dw ?    ;адреса сегмента, в якому знаходиться старий обробник переривання
old_int_offset dw ? ;зміщення(ефективна адреса) старого обробника переривання

CODESEG     ;Початок сегмента коду 

;Вхідні  дані: dx-адреса рядка виводу
;Вихідні дані: немає
PROC our_proc   ; створення своєї процедури-переривання
mov ah, 09h     ; команда виводу тексту на екран
int 21h         ; виклик переривання DOS
iret            ; повернення з процедури-переривання
ENDP our_proc   ; завершення своєї процедури-переривання
;--------------------

;Вхідні  дані: dx-зміщення(ефективна адреса) нового обробника переривання
;              bx-адреса сегмента, в якому знаходиться новий обробник переривання
;Вихідні дані: немає
PROC set_vector ; процедура встановлення свого вектора
push ds     ;занесення ds до стеку, оскільки його буде використано

mov ah, 25h         ;значення, що вказує на заміну адреса обробника переривання
mov al, 54h         ;номер переривання, що буде перезаписано(4 команда - 54 переривання)
mov ds, bx          ;занесення до потрібного регістру
int 21h             ;виклик переривання DOS

pop ds      ;повернення значеня ds
ret     ;повернення з процедури
ENDP set_vector; кінець процедури встановлення свого вектора
;--------------------

;Вхідні дані: немає
;Вихідні  дані: немає
PROC get_vector ;процедура запам'ятовування адреси старого вектора
push es     ;занесення es до стеку, оскільки його буде використано
push bx     ;занесення bs до стеку, оскільки його буде використано

mov ah, 35h     ;значення, що вказує на повернення адреса обробника переривання
mov al, 54h     ;номер переривання, що буде повернено(4 команда - 54 переривання)
int 21h         ;виклик переривання DOS

mov [old_int_seg], es   ;запис адреси сегмента старого обробника переривання
mov [old_int_offset], bx;запис зміщення в сегменті старого обробника переривання

pop bx      ;повернення значеня bx
pop es      ;повернення значеня es
ret         ;повернення з процедури
ENDP get_vector ;кінець процедури запам'ятовування адреси старого вектора

Start: ; мітка(лейбл) початку 
mov ax, @data   ;занесення адреси датасегмента да ах
mov ds, ax      ;ініціалізація датасегмента
mov es, ax      ;ініціалізація додаткового сегмента

call get_vector; виклик процедури запам'ятовування адреси старого вектора

lea dx, [our_proc]    ;зміщення(ефективна адреса) нового обробника переривання
mov bx, seg our_proc;адреса сегмента, в якому знаходиться новий обробник переривання
call set_vector     ; виклик процедури заміщення переривання

mov dx, offset message  ;встановлення адреси рядка для виведення
int 54h                 ;виклик заміщенного переривання

mov dx, [old_int_offset];зміщення(ефективна адреса) старого обробника переривання
mov bx, [old_int_seg]   ;адреса сегмента, в якому знаходиться старий обробник переривання
call set_vector     ; виклик процедури заміщення переривання

mov ax, 4ch ;значення завершення роботи програми 
int 21h     ;виклик переривання DOS

end Start   ; виклик з мітки Start